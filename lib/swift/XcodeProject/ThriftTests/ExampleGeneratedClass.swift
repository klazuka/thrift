import Foundation
import Thrift

/* struct ExampleGeneratedClass {
     1: i32 a = 99,
     2: i32 b,
     3: optional i32 c = 101
     4: optional i32 d
   }
*/


// an example class that would be generated by the Thrift compiler
// In this case, I wrote it by hand.
public struct ExampleGeneratedClass {
    
    // required Thrift field with default value
    public var a: Int32 = 99 { didSet { aIsSet = true } }
    
    // required Thrift field with no default value: use dummy value to satisfy the swift compiler
    public var b: Int32 = 0 { didSet { bIsSet = true } }
        
    // optional Thrift field with default value
    public var c: Int32? = 101  { didSet { cIsSet = true } }
    
    // optional Thrift field without a default value
    public var d: Int32? = nil { didSet { dIsSet = true } }
    
    private var aIsSet: Bool = false
    private var bIsSet: Bool = false
    private var cIsSet: Bool = false
    private var dIsSet: Bool = false
    
    static func read(thriftProtocol: TProtocol) -> ExampleGeneratedClass {
        let p = thriftProtocol
        var obj = ExampleGeneratedClass()
      
        p.readStructBegin()
        
        var exit = false
        while !exit {
            switch p.readFieldBegin() {
            case .Stop:
                exit = true // TODO use labeled break?
            case .Data(_, .I32, 1):
                obj.a = p.readI32()
            case .Data(_, .I32, 2):
                obj.b = p.readI32()
            case .Data(_, .I32, 3):
                obj.c = p.readI32()
            case .Data(_, .I32, 4):
                obj.d = p.readI32()
            case let .Data(_, elementType, _):
                skip(p, elementType)
            }
            p.readFieldEnd()
        }
        
        p.readStructEnd()
        
        assert(obj.validate(), "read failed validation")
        return obj
    }
    
    func write(thriftProtocol: TProtocol) {
        assert(validate(), "write failed validation")
        let p = thriftProtocol
        p.writeStructBegin("A")
        writeFieldMaybe(aIsSet, p, .I32, 1) { p.writeI32(self.a) }
        writeFieldMaybe(bIsSet, p, .I32, 2) { p.writeI32(self.b) }
        writeFieldMaybe(cIsSet && c != nil, p, .I32, 3) { p.writeI32(self.c!) }
        writeFieldMaybe(dIsSet && d != nil, p, .I32, 4) { p.writeI32(self.d!) }
        p.writeFieldStop()
        p.writeStructEnd()
    }
    
    func validate() -> Bool {
        return aIsSet && bIsSet
    }
}
